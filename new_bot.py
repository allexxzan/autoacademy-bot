# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ò–ú–ü–û–†–¢–´ –ò –ù–ê–°–¢–†–û–ô–ö–ò ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
import os
import uuid
import pytz
import logging
import datetime
import asyncpg
from dotenv import load_dotenv
from telegram import Update, ChatInviteLink
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    JobQueue, ChatMemberHandler
)
from telegram.constants import ChatMemberStatus
from telegram.error import BadRequest

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

ADMIN_ID = 5744533263
CHANNEL_ID = -1002673430364
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

# –¢–æ–ª—å–∫–æ —ç—Ç–∏ —é–∑–µ—Ä–Ω–µ–π–º—ã –º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø
approved_usernames = {
    "pankrat00", "milena_lifestyle1", "simonaee", "majjjya", "Alexart123",
    "nirta_66", "fekaloud", "nastyushkiiins", "anakrasln", "srgv_v",
    "ashkinarylit", "autoacadem10", "avirmary", "katei1"
}

logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ë–ê–ó–ï ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def get_db_pool():
    return await asyncpg.create_pool(DATABASE_URL)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /START ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    username = user.username
    now = datetime.datetime.utcnow()

    if not username:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ —É–∫–∞–∑–∞–Ω username. –î–æ–±–∞–≤—å –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.")
        return

    if username not in approved_usernames:
        await update.message.reply_text("–¢—ã –Ω–µ –≤ —Å–ø–∏—Å–∫–µ —É—á–µ–Ω–∏–∫–æ–≤ –ê–≤—Ç–æ–ê–∫–∞–¥–µ–º–∏–∏. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    async with context.application.bot_data["db"].acquire() as conn:
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω
        row = await conn.fetchrow("""
            SELECT * FROM tokens
            WHERE username = $1 AND used = TRUE AND subscription_ends > $2
            LIMIT 1
        """, username, now)

        if row:
            ends_msk = row["subscription_ends"].replace(tzinfo=pytz.utc).astimezone(MOSCOW_TZ)
            await update.message.reply_text(
                f"üîê –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –¥–æ {ends_msk.strftime('%Y-%m-%d %H:%M:%S %Z')}.\n"
                f"–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª–∞ –ª–∏ —É–∂–µ —Ä–∞–Ω–µ–µ –≤—ã–¥–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ (–Ω–æ –∏—Å—Ç–µ–∫–ª–∞)
        prev_token = await conn.fetchrow("""
            SELECT * FROM tokens
            WHERE username = $1
            LIMIT 1
        """, username)

        if prev_token:
            await update.message.reply_text("‚ö†Ô∏è –°—Å—ã–ª–∫–∞ —É–∂–µ –±—ã–ª–∞ –≤—ã–¥–∞–Ω–∞ —Ä–∞–Ω–µ–µ. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≤—ã–¥–∞—á–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏ –∏ —Ç–æ–∫–µ–Ω–∞
        token = uuid.uuid4().hex[:8]
        expires = now + datetime.timedelta(hours=1)
        subscription_ends = now + datetime.timedelta(minutes=10)

        try:
            invite: ChatInviteLink = await context.bot.create_chat_invite_link(
                chat_id=CHANNEL_ID,
                expire_date=expires,
                member_limit=1
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        await conn.execute("""
            INSERT INTO tokens (token, username, user_id, invite_link, expires, subscription_ends, used)
            VALUES ($1, $2, $3, $4, $5, $6, TRUE)
        """, token, username, user.id, invite.invite_link, expires, subscription_ends)

        ends_msk = subscription_ends.replace(tzinfo=pytz.utc).astimezone(MOSCOW_TZ)
        await update.message.reply_text(
            f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n"
            f"–°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞: {invite.invite_link}\n"
            f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {ends_msk.strftime('%Y-%m-%d %H:%M:%S %Z')}"
        )
        logging.info(f"–í—ã–¥–∞–Ω –¥–æ—Å—Ç—É–ø @{username} (ID: {user.id}) –¥–æ {subscription_ends}")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ê–í–¢–û-–ö–ò–ö –ò –£–î–ê–õ–ï–ù–ò–ï –ß–£–ñ–ê–ö–û–í ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def kick_expired_members(context: ContextTypes.DEFAULT_TYPE):
    logging.info("üîî –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫")
    now_utc = datetime.datetime.utcnow().replace(tzinfo=pytz.utc)

    async with context.application.bot_data["db"].acquire() as conn:
        rows = await conn.fetch("""
            SELECT * FROM tokens
            WHERE used = TRUE AND subscription_ends IS NOT NULL AND user_id != 0
        """)

        for row in rows:
            user_id = row["user_id"]
            username = row["username"]
            sub_ends = row["subscription_ends"].replace(tzinfo=pytz.utc)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –≤ –∫–∞–Ω–∞–ª–µ
            try:
                member = await context.bot.get_chat_member(CHANNEL_ID, user_id)
                is_in_chat = member.status in ['member', 'restricted']
            except BadRequest as e:
                is_in_chat = False if "user not found" in str(e).lower() else True

            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞ –º–∏–Ω—É—Ç—É –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
            time_left = (sub_ends - now_utc).total_seconds()
            if 0 < time_left <= 60 and is_in_chat:
                try:
                    await context.bot.send_message(user_id, "‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É!")
                    logging.info(f"üì¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ @{username}")
                except Exception as e:
                    logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å @{username}: {e}")

            # –ö–∏–∫ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏
            if time_left <= 0 and is_in_chat:
                try:
                    await context.bot.ban_chat_member(CHANNEL_ID, user_id, until_date=int(now_utc.timestamp()) + 30)
                    await conn.execute("UPDATE tokens SET used = FALSE WHERE user_id = $1", user_id)
                    logging.info(f"üö´ @{username} —É–¥–∞–ª—ë–Ω –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–∏–∫–∞ @{username}: {e}")

        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –£–î–ê–õ–ï–ù–ò–ï –ß–£–ñ–ê–ö–û–í ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        logging.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–ª–µ–≥–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")

        try:
            admins = await context.bot.get_chat_administrators(CHANNEL_ID)
            admin_ids = {admin.user.id for admin in admins}
        except Exception as e:
            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤: {e}")
            return

        EXCEPTION_IDS = {ADMIN_ID}
        EXCEPTIONS = admin_ids.union(EXCEPTION_IDS)

        # –í—Å–µ, —É –∫–æ–≥–æ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—â—ë –∞–∫—Ç–∏–≤–Ω–∞
                # –í—Å–µ, —É –∫–æ–≥–æ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—â—ë –∞–∫—Ç–∏–≤–Ω–∞
        allowed_ids = {row["user_id"] for row in await conn.fetch("""
            SELECT user_id FROM tokens
            WHERE used = TRUE AND subscription_ends > $1 AND user_id IS NOT NULL
        """, now_utc)}

        all_known = await conn.fetch("SELECT user_id FROM tokens WHERE user_id IS NOT NULL")
        for row in all_known:
            user_id = row["user_id"]
            if user_id in allowed_ids or user_id in EXCEPTIONS:
                continue

            try:
                member = await context.bot.get_chat_member(CHANNEL_ID, user_id)
                if member.status in ['member', 'restricted']:
                    username = member.user.username or f"ID_{user_id}"
                    logging.info(f"üëÄ –û–±–Ω–∞—Ä—É–∂–µ–Ω —á—É–∂–∞–∫ @{username} (ID: {user_id})")
                    await context.bot.send_message(
                        ADMIN_ID,
                        f"‚ö†Ô∏è –í –∫–∞–Ω–∞–ª –≤—Å—Ç—É–ø–∏–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user_id}) ‚Äî –æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
                        f"–°–∞–º —Ä–µ—à–∞–π, –∫–∏–∫–∞—Ç—å –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å."
                    )
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ ID {user_id}: {e}")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –û–ë–†–ê–ë–û–¢–ö–ê –í–°–¢–£–ü–õ–ï–ù–ò–Ø –í –ö–ê–ù–ê–õ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def handle_chat_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_member = update.my_chat_member
    user = chat_member.new_chat_member.user

    if chat_member.new_chat_member.status == ChatMemberStatus.MEMBER:
        user_id = user.id
        username = user.username or f"ID_{user_id}"

        async with context.application.bot_data["db"].acquire() as conn:
            row = await conn.fetchrow(
                "SELECT * FROM tokens WHERE user_id = $1 AND used = TRUE", user_id
            )

            # –ß—É–∂–∞–∫ ‚Äî –±–∞–Ω
            if not row and user_id not in {ADMIN_ID}:
                try:
                    await context.bot.send_message(
                        ADMIN_ID,
                        f"‚ö†Ô∏è –í –∫–∞–Ω–∞–ª –≤—Å—Ç—É–ø–∏–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user_id})"
                    )
                except Exception as e:
                    logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞: {e}")

                try:
                    await context.bot.ban_chat_member(CHANNEL_ID, user_id, until_date=int(datetime.datetime.utcnow().timestamp()) + 30)
                    logging.info(f"üõë –ö–∏–∫–Ω—É—Ç —á—É–∂–∞–∫ @{username}")
                except Exception as e:
                    logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–∏–∫–Ω—É—Ç—å @{username}: {e}")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /SENDLINK ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def sendlink(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /sendlink @username")
        return

    username = context.args[0].lstrip("@")

    async with context.application.bot_data["db"].acquire() as conn:
        if username not in approved_usernames:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —É—á–µ–Ω–∏–∫–æ–≤.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—É—é —Å—Å—ã–ª–∫—É
        old = await conn.fetchrow("SELECT invite_link FROM tokens WHERE username = $1 LIMIT 1", username)
        if old and old["invite_link"]:
            try:
                await context.bot.revoke_chat_invite_link(CHANNEL_ID, old["invite_link"])
                logging.info(f"üîí –°—Ç–∞—Ä–∞—è —Å—Å—ã–ª–∫–∞ @{username} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—É—é —Å—Å—ã–ª–∫—É @{username}: {e}")

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await conn.execute("DELETE FROM tokens WHERE username = $1", username)

        await update.message.reply_text(
            f"‚ôªÔ∏è –í—Å–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è @{username} —Å–±—Ä–æ—à–µ–Ω—ã.\n"
            f"–ü–æ–ø—Ä–æ—Å–∏ –≤–≤–µ—Å—Ç–∏ /start –∑–∞–Ω–æ–≤–æ."
        )
        logging.info(f"üîÑ –°–±—Ä–æ—à–µ–Ω—ã –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ @{username}")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /STATS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    async with context.application.bot_data["db"].acquire() as conn:
        total = await conn.fetchval("SELECT COUNT(*) FROM tokens")
        used = await conn.fetchval("SELECT COUNT(*) FROM tokens WHERE used = TRUE")
        unused = await conn.fetchval("SELECT COUNT(*) FROM tokens WHERE used = FALSE")

        await update.message.reply_text(
            f"üìä –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {total}\n"
            f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö: {used}\n"
            f"üï∏ –ù–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö: {unused}"
        )

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –°–¢–ê–†–¢ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def on_startup(app):
    try:
        await app.bot.delete_webhook(drop_pending_updates=True)
        logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")

        pool = await get_db_pool()
        app.bot_data["db"] = pool
        logging.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

        app.job_queue.run_repeating(kick_expired_members, interval=300, first=10)
        logging.info("‚è≥ –ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        raise

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ö–û–ú–ê–ù–î–´ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

async def force_kick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await kick_expired_members(context)
    await update.message.reply_text("‚úÖ –ê–≤—Ç–æ–∫–∏–∫ –∑–∞–ø—É—â–µ–Ω –≤—Ä—É—á–Ω—É—é")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ MAIN ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if __name__ == "__main__":
    print("üü¢ –°–∫—Ä–∏–ø—Ç –Ω–∞—á–∞–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ!")

    app = (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .job_queue(JobQueue())
        .build()
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("sendlink", sendlink))
    app.add_handler(CommandHandler("test", test))
    app.add_handler(CommandHandler("force_kick", force_kick))
    app.add_handler(ChatMemberHandler(handle_chat_member, chat_member_types=ChatMemberHandler.MY_CHAT_MEMBER))

    app.post_init = on_startup

    app.run_polling(
        close_loop=False,
        stop_signals=None,
        allowed_updates=Update.ALL_TYPES,
        drop_pending_updates=True
    )
