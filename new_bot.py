import os
import uuid
import pytz
import asyncpg
import logging
import datetime
from dotenv import load_dotenv

from telegram import Update, ChatInviteLink
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, JobQueue
from telegram.error import Forbidden, BadRequest

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ù–ê–°–¢–†–û–ô–ö–ò ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()
DATABASE_URL = os.getenv("DATABASE_URL")
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = 5744533263
CHANNEL_ID = -1002673430364
MOSCOW_TZ = pytz.timezone("Europe/Moscow")

logging.basicConfig(level=logging.INFO)

approved_usernames = {
    "pankrat00", "milena_lifestyle1", "simonaee", "majjjya", "Alexart123",
    "nirta_66", "fekaloud", "nastyushkiiins", "anakrasln", "srgv_v",
    "ashkinarylit", "autoacadem10", "avirmary", "katei1"
}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ë–ê–ó–ê ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def get_db_pool():
    return await asyncpg.create_pool(DATABASE_URL)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /start ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    username = user.username
    now = datetime.datetime.utcnow()

    if not username:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ —É–∫–∞–∑–∞–Ω username. –î–æ–±–∞–≤—å –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.")
        return

    if username not in approved_usernames:
        await update.message.reply_text("–¢—ã –Ω–µ –≤ —Å–ø–∏—Å–∫–µ —É—á–µ–Ω–∏–∫–æ–≤ –ê–≤—Ç–æ–ê–∫–∞–¥–µ–º–∏–∏. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    async with context.application.bot_data["db"].acquire() as conn:
        # –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞?
        active = await conn.fetchrow("""
            SELECT * FROM tokens 
            WHERE username = $1 AND used = TRUE AND subscription_ends > $2
            ORDER BY subscription_ends DESC LIMIT 1
        """, username, now)

        if active:
            ends_msk = active["subscription_ends"].replace(tzinfo=pytz.utc).astimezone(MOSCOW_TZ)
            await update.message.reply_text(
                f"‚úÖ –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {ends_msk.strftime('%Y-%m-%d %H:%M:%S %Z')}.\n"
                f"–°—Å—ã–ª–∫–∞: {active['invite_link']}\n\n"
                f"–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return

        # –ï—Å—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω?
        row = await conn.fetchrow("""
            SELECT * FROM tokens
            WHERE username = $1 AND used = FALSE AND expires > $2
            LIMIT 1
        """, username, now)

        if row:
            expires_msk = row["expires"].replace(tzinfo=pytz.utc).astimezone(MOSCOW_TZ)
            await update.message.reply_text(
                f"üîë –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{row['invite_link']}\n"
                f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –¥–æ {expires_msk.strftime('%Y-%m-%d %H:%M:%S %Z')}"
            )
            return

        # –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω
        token = uuid.uuid4().hex[:8]
        expires = now + datetime.timedelta(hours=1)
        subscription_ends = now + datetime.timedelta(minutes=10)

        try:
            invite: ChatInviteLink = await context.bot.create_chat_invite_link(
                chat_id=CHANNEL_ID,
                expire_date=expires,
                member_limit=1
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏: {e}")
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            return

        await conn.execute("""
            INSERT INTO tokens (token, username, user_id, invite_link, expires, subscription_ends, used)
            VALUES ($1, $2, $3, $4, $5, $6, TRUE)
        """, token, username, user.id, invite.invite_link, expires, subscription_ends)

        sub_msk = subscription_ends.replace(tzinfo=pytz.utc).astimezone(MOSCOW_TZ)
        await update.message.reply_text(
            f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n"
            f"–°—Å—ã–ª–∫–∞: {invite.invite_link}\n"
            f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {sub_msk.strftime('%Y-%m-%d %H:%M:%S %Z')}"
        )


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /stats ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    
    async with context.application.bot_data["db"].acquire() as conn:
        total = await conn.fetchval("SELECT COUNT(*) FROM tokens")
        unused = await conn.fetchval("SELECT COUNT(*) FROM tokens WHERE used = FALSE")
        await update.message.reply_text(f"–í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {total}\n–ù–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö: {unused}")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /remove ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def remove_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove username")
        return

    username = context.args[0].lstrip("@")
    async with context.application.bot_data["db"].acquire() as conn:
        await conn.execute("DELETE FROM tokens WHERE username = $1", username)
        await update.message.reply_text(f"–í—Å–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è @{username} —É–¥–∞–ª–µ–Ω—ã.")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /reissue ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def reissue(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reissue username")
        return

    username = context.args[0].lstrip("@")
    if username not in approved_usernames:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —É—á–µ–Ω–∏–∫–æ–≤.")
        return

    now = datetime.datetime.utcnow()
    expires = now + datetime.timedelta(hours=1)
    subscription_ends = now + datetime.timedelta(minutes=10)
    token = uuid.uuid4().hex[:8]

    try:
        invite = await context.bot.create_chat_invite_link(
            chat_id=CHANNEL_ID,
            expire_date=expires,
            member_limit=1
        )
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏: {e}")
        return

    async with context.application.bot_data["db"].acquire() as conn:
        await conn.execute("DELETE FROM tokens WHERE username = $1", username)
        await conn.execute("""
            INSERT INTO tokens (token, username, user_id, invite_link, expires, subscription_ends, used)
            VALUES ($1, $2, $3, $4, $5, $6, TRUE)
        """, token, username, 0, invite.invite_link, expires, subscription_ends)

    sub_msk = subscription_ends.replace(tzinfo=pytz.utc).astimezone(MOSCOW_TZ)
    await update.message.reply_text(
        f"‚úÖ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è @{username}:\n"
        f"{invite.invite_link}\n"
        f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {sub_msk.strftime('%Y-%m-%d %H:%M:%S %Z')}"
    )


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ê–í–¢–û–ö–ò–ö ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def kick_expired_members(context: ContextTypes.DEFAULT_TYPE):
    now = datetime.datetime.utcnow()

    async with context.application.bot_data["db"].acquire() as conn:
        expired = await conn.fetch("""
            SELECT * FROM tokens
            WHERE used = TRUE AND subscription_ends <= $1
        """, now)

        for row in expired:
            user_id = row["user_id"]

            try:
                member = await context.bot.get_chat_member(CHANNEL_ID, user_id)
                if member.status in ['member', 'administrator']:
                    await context.bot.ban_chat_member(CHANNEL_ID, user_id)
                    await context.bot.unban_chat_member(CHANNEL_ID, user_id)
                    await context.bot.send_message(user_id, "‚è∞ –¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É –∑–∞–∫—Ä—ã—Ç.")
                    logging.info(f"‚úÖ –ö–∏–∫–Ω—É—Ç: {user_id}")
            except Forbidden:
                logging.warning(f"‚ö†Ô∏è –ù–µ—Ç –ø—Ä–∞–≤ —É–¥–∞–ª–∏—Ç—å {user_id}")
            except BadRequest as e:
                logging.warning(f"‚ùó BadRequest: {e}")
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∏–∫–µ {user_id}: {e}")

            await conn.execute("DELETE FROM tokens WHERE user_id = $1", user_id)

        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞ 1 –º–∏–Ω—É—Ç—É
        warning_users = await conn.fetch("""
            SELECT user_id, subscription_ends FROM tokens
            WHERE used = TRUE AND subscription_ends > $1 AND subscription_ends <= $2
        """, now + datetime.timedelta(seconds=50), now + datetime.timedelta(seconds=70))

        for row in warning_users:
            try:
                await context.bot.send_message(row["user_id"], "‚è≥ –û—Å—Ç–∞–ª–∞—Å—å 1 –º–∏–Ω—É—Ç–∞ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏!")
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å {row['user_id']}: {e}")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ó–ê–ü–£–°–ö ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def on_startup(app):
    await app.bot.delete_webhook(drop_pending_updates=True)
    app.bot_data["db"] = await get_db_pool()
    app.job_queue.run_repeating(kick_expired_members, interval=30, first=5)
    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")


if __name__ == "__main__":
    app = (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .job_queue(JobQueue())
        .build()
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("remove", remove_user))
    app.add_handler(CommandHandler("reissue", reissue))

    app.post_init = on_startup
    app.run_polling()
