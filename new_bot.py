import os
import uuid
import pytz
import asyncpg
import logging
import datetime
from dotenv import load_dotenv
from telegram import Update, ChatInviteLink
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, JobQueue
from telegram.error import Forbidden

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ù–ê–°–¢–†–û–ô–ö–ò ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()
DATABASE_URL = os.getenv("DATABASE_URL")
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = 5744533263
CHANNEL_ID = -1002673430364
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

approved_usernames = {
    "pankrat00", "milena_lifestyle1", "simonaee", "majjjya", "Alexart123",
    "nirta_66", "fekaloud", "nastyushkiiins", "anakrasln", "srgv_v",
    "ashkinarylit", "autoacadem10", "avirmary", "katei1"
}

logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ë–ê–ó–ê ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def get_db_pool():
    return await asyncpg.create_pool(DATABASE_URL)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /START ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    username = user.username
    now = datetime.datetime.utcnow()

    if not username:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ —É–∫–∞–∑–∞–Ω username. –î–æ–±–∞–≤—å –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.")
        return

    if username not in approved_usernames:
        await update.message.reply_text("–¢—ã –Ω–µ –≤ —Å–ø–∏—Å–∫–µ —É—á–µ–Ω–∏–∫–æ–≤ –ê–≤—Ç–æ–ê–∫–∞–¥–µ–º–∏–∏. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    async with context.application.bot_data["db"].acquire() as conn:
        # 1. –ï—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞?
        row = await conn.fetchrow("""
            SELECT * FROM tokens
            WHERE username = $1 AND used = TRUE AND subscription_ends > $2
            LIMIT 1
        """, username, now)

        if row:
            ends_msk = row["subscription_ends"].replace(tzinfo=pytz.utc).astimezone(MOSCOW_TZ)
            await update.message.reply_text(
                f"üîê –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –¥–æ {ends_msk.strftime('%Y-%m-%d %H:%M:%S %Z')}.\n"
                f"–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–¥–∞–≤–∞–ª–∞—Å—å –ª–∏ —É–∂–µ —Å—Å—ã–ª–∫–∞
        prev_token = await conn.fetchrow("""
            SELECT * FROM tokens
            WHERE username = $1
            LIMIT 1
        """, username)

        if prev_token:
            await update.message.reply_text("‚ö†Ô∏è –°—Å—ã–ª–∫–∞ —É–∂–µ –±—ã–ª–∞ –≤—ã–¥–∞–Ω–∞ —Ä–∞–Ω–µ–µ. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≤—ã–¥–∞—á–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏ (–ø–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞)
        token = uuid.uuid4().hex[:8]
        expires = now + datetime.timedelta(hours=1)
        subscription_ends = now + datetime.timedelta(minutes=10)

        try:
            invite: ChatInviteLink = await context.bot.create_chat_invite_link(
                chat_id=CHANNEL_ID,
                expire_date=expires,
                member_limit=1
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        await conn.execute("""
            INSERT INTO tokens (token, username, user_id, invite_link, expires, subscription_ends, used)
            VALUES ($1, $2, $3, $4, $5, $6, TRUE)
        """, token, username, user.id, invite.invite_link, expires, subscription_ends)

        ends_msk = subscription_ends.replace(tzinfo=pytz.utc).astimezone(MOSCOW_TZ)
        await update.message.reply_text(
            f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n"
            f"–°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞: {invite.invite_link}\n"
            f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {ends_msk.strftime('%Y-%m-%d %H:%M:%S %Z')}"
        )
        logging.info(f"–í—ã–¥–∞–Ω –¥–æ—Å—Ç—É–ø @{username} –¥–æ {subscription_ends}")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –ò –ê–í–¢–û–ö–ò–ö ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def kick_expired_members(context: ContextTypes.DEFAULT_TYPE):
    now = datetime.datetime.utcnow()

    async with context.application.bot_data["db"].acquire() as conn:
        rows = await conn.fetch("""
            SELECT * FROM tokens
            WHERE used = TRUE AND subscription_ends IS NOT NULL
        """)

        for row in rows:
            user_id = row["user_id"]
            subscription_ends = row["subscription_ends"]

            if not subscription_ends:
                continue

            time_left = (subscription_ends - now).total_seconds()

            # ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ó–ê –ú–ò–ù–£–¢–£, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –í–°–¢–£–ü–ò–õ –≤ –∫–∞–Ω–∞–ª
            if 50 <= time_left <= 70:
                try:
                    member = await context.bot.get_chat_member(CHANNEL_ID, user_id)
                    if member.status in ['member', 'administrator']:
                        await context.bot.send_message(user_id, "‚è≥ –û—Å—Ç–∞–ª–∞—Å—å 1 –º–∏–Ω—É—Ç–∞ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏!")
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {user_id}: {e}")

            # ‚õîÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ ‚Äî –∫–∏–∫–∞–µ–º, –µ—Å–ª–∏ –æ–Ω –≤ –∫–∞–Ω–∞–ª–µ
            if time_left <= 0:
                try:
                    member = await context.bot.get_chat_member(CHANNEL_ID, user_id)
                    if member.status in ['member', 'administrator']:
                        await context.bot.ban_chat_member(CHANNEL_ID, user_id)
                        await context.bot.unban_chat_member(CHANNEL_ID, user_id)
                        await context.bot.send_message(user_id, "‚è∞ –¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É –∑–∞–∫—Ä—ã—Ç.")
                        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞.")
                except Forbidden:
                    logging.warning(f"–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /REISSUE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def reissue(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /reissue username")
        return

    username = context.args[0].lstrip("@")
    if username not in approved_usernames:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —É—á–µ–Ω–∏–∫–æ–≤.")
        return

    now = datetime.datetime.utcnow()
    expires = now + datetime.timedelta(hours=1)
    subscription_ends = now + datetime.timedelta(minutes=10)
    token = uuid.uuid4().hex[:8]

    try:
        invite = await context.bot.create_chat_invite_link(
            chat_id=CHANNEL_ID,
            expire_date=expires,
            member_limit=1
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏.")
        return

    async with context.application.bot_data["db"].acquire() as conn:
        await conn.execute("DELETE FROM tokens WHERE username = $1", username)
        await conn.execute("""
            INSERT INTO tokens (token, username, user_id, invite_link, expires, subscription_ends, used)
            VALUES ($1, $2, $3, $4, $5, $6, TRUE)
        """, token, username, 0, invite.invite_link, expires, subscription_ends)

    ends_msk = subscription_ends.replace(tzinfo=pytz.utc).astimezone(MOSCOW_TZ)
    await update.message.reply_text(
        f"‚úÖ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è @{username}:\n{invite.invite_link}\n–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {ends_msk.strftime('%Y-%m-%d %H:%M:%S %Z')}"
    )

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /STATS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    async with context.application.bot_data["db"].acquire() as conn:
        total = await conn.fetchval("SELECT COUNT(*) FROM tokens")
        used = await conn.fetchval("SELECT COUNT(*) FROM tokens WHERE used = TRUE")
        unused = await conn.fetchval("SELECT COUNT(*) FROM tokens WHERE used = FALSE")
        await update.message.reply_text(
            f"üìä –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {total}\n"
            f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö: {used}\n"
            f"üï∏ –ù–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö: {unused}"
        )       

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def on_startup(app):
    try:
        await app.bot.delete_webhook(drop_pending_updates=True)
        logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")

        # –°–æ–∑–¥–∞—ë–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–∞–∑–æ–π –∏ –∫–ª–∞–¥—ë–º –µ–≥–æ –≤ bot_data
        pool = await get_db_pool()
        app.bot_data["db"] = pool

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∞–≤—Ç–æ–∫–∏–∫ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        app.job_queue.run_repeating(kick_expired_members, interval=30, first=5)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        raise


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /test ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ MAIN ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if __name__ == "__main__":
    print("üü¢ –°–∫—Ä–∏–ø—Ç –Ω–∞—á–∞–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ!")

    app = (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .job_queue(JobQueue())
        .build()
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("reissue", reissue))
    app.add_handler(CommandHandler("test", test))

    app.post_init = on_startup
    app.run_polling()
