import os
import logging
import asyncio
import datetime
from dotenv import load_dotenv
from telegram import Update, ChatInviteLink
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, ChatMemberHandler
from db import Database  # —Ç–≤–æ–π –∫–ª–∞—Å—Å –∏–∑ db.py

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "").split(','))) if os.getenv("ADMIN_IDS") else []

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {ADMIN_IDS}")

db = Database()

# –ü–æ–º–æ—â—å –ø–æ –ø—Ä–∞–≤–∞–º
def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç.")

# --- –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞ ---

async def add_student(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not is_admin(user.id):
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addstudent @username")
        return

    username = context.args[0].lstrip("@").lower()
    logger.info(f"–î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ @{username} –ø–æ –∫–æ–º–∞–Ω–¥–µ –æ—Ç {user.username}")
    await db.add_student(username)
    await update.message.reply_text(f"‚úÖ –°—Ç—É–¥–µ–Ω—Ç @{username} –¥–æ–±–∞–≤–ª–µ–Ω.")

async def delete_student(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not is_admin(user.id):
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /deletestudent @username")
        return

    username = context.args[0].lstrip("@").lower()
    logger.info(f"–£–¥–∞–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ @{username} –ø–æ –∫–æ–º–∞–Ω–¥–µ –æ—Ç {user.username}")
    await db.delete_student(username)
    await update.message.reply_text(f"‚úÖ –°—Ç—É–¥–µ–Ω—Ç @{username} —É–¥–∞–ª—ë–Ω.")

async def reset_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not is_admin(user.id):
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /resetlink @username")
        return

    username = context.args[0].lstrip("@").lower()
    # –ó–¥–µ—Å—å —Å–±—Ä–∞—Å—ã–≤–∞–µ–º invite_* –ø–æ–ª—è (–ª–æ–≥–∏–∫–∞ –≤ db.py, –Ω–∞–ø—Ä–∏–º–µ—Ä)
    logger.info(f"–°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è @{username} –ø–æ –∫–æ–º–∞–Ω–¥–µ –æ—Ç {user.username}")

    # –û–±–Ω—É–ª–∏–º invite_link, invite_created_at, invite_sent_at –≤ –ë–î
    await db.update_invite_link(username, None)  # –ü–µ—Ä–µ–¥–∞—ë–º None —á—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å
    await update.message.reply_text(f"‚úÖ –°—Å—ã–ª–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –¥–ª—è @{username}.")

async def kick_expired(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not is_admin(user.id):
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    logger.info(f"–ó–∞–ø—É—â–µ–Ω —Ä—É—á–Ω–æ–π –∫–∏–∫ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –∫–æ–º–∞–Ω–¥–µ –æ—Ç {user.username}")
    await kick_expired_subscriptions(context)
    await update.message.reply_text("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã —É–¥–∞–ª–µ–Ω—ã.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not is_admin(user.id):
        return

    text = (
        "üõ† <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/addstudent @username ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞\n"
        "/resetlink @username ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å —Å—Å—ã–ª–∫—É\n"
        "/deletestudent @username ‚Äî —É–¥–∞–ª–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞\n"
        "/kickexpired ‚Äî –≤—Ä—É—á–Ω—É—é –∫–∏–∫–Ω—É—Ç—å –≤—Å–µ—Ö —Å –∏—Å—Ç—ë–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π\n"
        "/stats ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    await update.message.reply_text(text, parse_mode="HTML")

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not is_admin(user.id):
        return

    # –°—á–∏—Ç–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö
    all_students = await db.get_all_students()
    now = datetime.datetime.utcnow()
    active = [s for s in all_students if s['valid_until'] and s['valid_until'] > now]
    expired = [s for s in all_students if s['valid_until'] and s['valid_until'] <= now]

    text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"–í—Å–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {len(all_students)}\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active)}\n"
        f"–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö: {len(expired)}"
    )
    await update.message.reply_text(text)

# --- –ê–≤—Ç–æ–∫–∏–∫ (–∑–∞–¥–∞—á–∞ –≤ —Ñ–æ–Ω–µ) ---
async def kick_expired_subscriptions(context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Å –∏—Å—Ç—ë–∫—à–∏–º —Å—Ä–æ–∫–æ–º...")

    expired_students = await db.get_expired_students()
    bot = context.bot

    for student in expired_students:
        username = student['username']
        invite_link = student['invite_link']
        try:
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∫–∞–Ω–∞–ª–∞
            logger.info(f"–ö–∏–∫–∞–µ–º @{username} –∏–∑ –∫–∞–Ω–∞–ª–∞")
            await bot.ban_chat_member(CHANNEL_ID, student['telegram_id'], until_date=datetime.datetime.utcnow()+datetime.timedelta(seconds=60))
            await bot.unban_chat_member(CHANNEL_ID, student['telegram_id'])
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∫–∏–∫–∞
            await db.update_kick_time(username)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∏–∫–µ @{username}: {e}")

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏ ---
async def generate_invite_link(username: str, bot):
    logger.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫—É –¥–ª—è @{username}")
    try:
        # –°–æ–∑–¥–∞—ë–º invite —Å—Å—ã–ª–∫—É —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –∫–æ–ª-–≤—É
        invite_link_obj = await bot.create_chat_invite_link(
            chat_id=CHANNEL_ID,
            expire_date=datetime.datetime.utcnow() + datetime.timedelta(days=365),
            member_limit=1,
            name=f"Invite for {username}"
        )
        invite_link = invite_link_obj.invite_link
        await db.update_invite_link(username, invite_link)
        return invite_link
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è @{username}: {e}")
        return None

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Å—ã–ª–∫–∏ –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ ---
async def request_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = update.effective_user.username
    if not username:
        await update.message.reply_text("–ù–µ–ª—å–∑—è –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –Ω–µ—Ç username –≤ Telegram.")
        return

    username = username.lower()
    student = await db.get_student(username)
    if not student:
        await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –≤—ã–¥–∞–≤–∞—Ç—å —Å—Å—ã–ª–∫—É (–ª–æ–≥–∏–∫–∞ –∏–∑ –±–∞–∑—ã)
    # –ó–¥–µ—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ: –µ—Å–ª–∏ invite_sent_at –ø—É—Å—Ç–æ–π –∏–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
    can_send = True  # –ü–æ–∫–∞ –≤ –∑–∞–≥–ª—É—à–∫–µ, –ø–æ—Ç–æ–º –∏–∑ –±–∞–∑—ã
    if not can_send:
        await update.message.reply_text("–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Å—Å—ã–ª–∫—É, –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –º–æ–∂–Ω–æ –ø–æ–∑–∂–µ.")
        return

    invite_link = await generate_invite_link(username, context.bot)
    if invite_link:
        await update.message.reply_text(f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è: {invite_link}")
    else:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ---
async def main():
    await db.connect()

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("addstudent", add_student))
    app.add_handler(CommandHandler("deletestudent", delete_student))
    app.add_handler(CommandHandler("resetlink", reset_link))
    app.add_handler(CommandHandler("kickexpired", kick_expired))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("getlink", request_link))

    job_queue = app.job_queue
    job_queue.run_repeating(kick_expired_subscriptions, interval=3600, first=10)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    await app.run_polling()  # –í–ê–ñ–ù–û: —ç—Ç–æ async —Ñ—É–Ω–∫—Ü–∏—è!

# –í–º–µ—Å—Ç–æ asyncio.run(main()) ‚Äî –≤–æ—Ç —Ç–∞–∫:
if __name__ == "__main__":
    import nest_asyncio
    import asyncio

    nest_asyncio.apply()  # üí° —Ñ–∏–∫—Å –¥–ª—è "loop already running" –∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ —Å event loop

    asyncio.run(main())
