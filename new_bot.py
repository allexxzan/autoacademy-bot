import os
import logging
import asyncio
import datetime

from dotenv import load_dotenv
from telegram import Update, ChatInviteLink
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

from db import Database  # –¢–≤–æ—è –±–∞–∑–∞, –±—É–¥–µ—Ç –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–∞ –ø–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä—É

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "").split(','))) if os.getenv("ADMIN_IDS") else []
CURATOR_ID = int(os.getenv("CURATOR_ID", "0"))  # –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ –ª–µ–≤–∞–∫–∞—Ö

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

db = Database()


def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS


# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    username = user.username.lower() if user.username else None

    if not username:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ –∑–∞–¥–∞–Ω username. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫—É—Ä–∞—Ç–æ—Ä—É.")
        return

    student = await db.get_student(username)

    if not student:
        await context.bot.send_message(CURATOR_ID, f"üö® –õ–µ–≤–∞–∫: @{username} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
        await update.message.reply_text("‚õî –ö–∞–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —É—á–µ–Ω–∏–∫–∞–º –ê–≤—Ç–æ–ê–∫–∞–¥–µ–º–∏–∏.")
        return

    now = datetime.datetime.utcnow()

    if student["valid_until"] and student["valid_until"] <= now:
        await update.message.reply_text("‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ ‚Äî —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∫—É—Ä–∞—Ç–æ—Ä–∞.")
        return

    if student["invite_sent_at"]:
        await update.message.reply_text("üì¨ –°—Å—ã–ª–∫–∞ —É–∂–µ –±—ã–ª–∞ –≤—ã–¥–∞–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫—É—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–æ–≤–æ–π.")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏
    invite_link = await generate_invite_link(context.bot, username)
    if not invite_link:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    await db.record_invite_sent(username, invite_link, now)

    valid_until = now + datetime.timedelta(days=365)

    await db.activate_subscription(username, now, valid_until)

    await update.message.reply_text(
        f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n"
        f"üìÖ –î–∞—Ç–∞: {now.strftime('%Y-%m-%d %H:%M UTC')}\n"
        f"‚è≥ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {valid_until.strftime('%Y-%m-%d %H:%M UTC')}\n"
        f"üîó –°—Å—ã–ª–∫–∞: {invite_link}"
    )


import traceback  # ‚ö†Ô∏è –í—Å—Ç–∞–≤—å —ç—Ç–æ –≤ —Å–∞–º–æ–º –≤–µ—Ä—Ö—É —Ñ–∞–π–ª–∞, –≤–Ω–µ —Ñ—É–Ω–∫—Ü–∏–∏!

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–π —Å—Å—ã–ª–∫–∏ ---
async def generate_invite_link(bot, username: str) -> str | None:
    try:
        now = datetime.datetime.utcnow()
        invite: ChatInviteLink = await bot.create_chat_invite_link(
            chat_id=CHANNEL_ID,
            expire_date=now + datetime.timedelta(hours=1),
            member_limit=1,
            name=f"–ê–≤—Ç–æ–ê–∫–∞–¥–µ–º–∏—è @{username}"
        )
        return invite.invite_link

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è @{username}: {e}")
        logger.error(traceback.format_exc())  # üî• –ª–æ–≥ –≤—Å–µ–π –æ—à–∏–±–∫–∏
        return None

# --- –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ ---
async def kick_expired_subscriptions(context: ContextTypes.DEFAULT_TYPE):
    logger.info("üßπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–∏–∫ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö...")
    now = datetime.datetime.utcnow()

    expired_students = await db.get_expired_students(now)

    for student in expired_students:
        username = student["username"]

        try:
            await context.bot.ban_chat_member(CHANNEL_ID, student["user_id"], until_date=now + datetime.timedelta(seconds=60))
            await context.bot.unban_chat_member(CHANNEL_ID, student["user_id"])

            await db.mark_kicked(username, now)

            try:
                await context.bot.send_message(student["user_id"], "‚è≥ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É –∑–∞–∫—Ä—ã—Ç.")
            except Exception:
                pass

            logger.info(f"–ö–∏–∫–Ω—É—Ç @{username}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ @{username}: {e}")


# --- –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã ---
async def add_student(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")

    if not context.args:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addstudent @username")

    username = context.args[0].lstrip("@").lower()
    await db.add_student(username)
    await update.message.reply_text(f"‚úÖ @{username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É.")


async def deletestudent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")

    if not context.args:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /deletestudent @username")

    username = context.args[0].lstrip("@").lower()
    await db.delete_student(username)
    await update.message.reply_text(f"üóëÔ∏è @{username} —É–¥–∞–ª—ë–Ω.")


async def reset_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")

    if not context.args:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /resetlink @username")

    username = context.args[0].lstrip("@").lower()
    await db.reset_link(username)
    await update.message.reply_text(f"‚ôªÔ∏è –°—Å—ã–ª–∫–∞ –¥–ª—è @{username} —Å–±—Ä–æ—à–µ–Ω–∞.")


async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return

    total, active, expired = await db.get_stats()
    await update.message.reply_text(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"üë• –í—Å–µ–≥–æ: {total}\n"
        f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active}\n"
        f"‚åõ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö: {expired}"
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return

    await update.message.reply_text(
        "üõ† –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
        "/addstudent @username ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞\n"
        "/resetlink @username ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å —Å—Å—ã–ª–∫—É\n"
        "/deletestudent @username ‚Äî —É–¥–∞–ª–∏—Ç—å\n"
        "/kickexpired ‚Äî –∫–∏–∫–Ω—É—Ç—å –∏—Å—Ç–µ–∫—à–∏—Ö\n"
        "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/help ‚Äî –ø–æ–º–æ—â—å"
    )


async def kickexpired(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")

    await kick_expired_subscriptions(context)
    await update.message.reply_text("‚úÖ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.")


# --- –ú–æ–ª—á–∞–Ω–∫–∞ –¥–ª—è –ª–µ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def silent_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pass


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    await db.connect()

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("addstudent", add_student))
    app.add_handler(CommandHandler("deletestudent", deletestudent))
    app.add_handler(CommandHandler("resetlink", reset_link))
    app.add_handler(CommandHandler("kickexpired", kickexpired))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, silent_handler))

    app.job_queue.run_repeating(kick_expired_subscriptions, interval=3600, first=10)

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await app.run_polling()


if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.run(main())
