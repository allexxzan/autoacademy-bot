import os
import uuid
import logging
import datetime
import asyncpg
import pytz
import json  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç json
from dotenv import load_dotenv
from telegram import Update, ChatInviteLink
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, ChatMemberHandler
from telegram.error import TelegramError

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")
CHANNEL_ID = int(os.getenv("CHANNEL_ID", "-1002673430364"))
ADMINS = os.getenv("ADMINS")  # –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –≤ –≤–∏–¥–µ JSON
ADMINS = json.loads(ADMINS) if ADMINS else {}  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ª–æ–≤–∞—Ä—å
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(name)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –û—à–∏–±–∫–∏
class ErrorMessages:
    NO_USERNAME = "‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –Ω—É–∂–µ–Ω username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram!"
    DB_ERROR = "üîß –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    LINK_ERROR = "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    PERMISSION_DENIED = "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã"
    INTERNAL_ERROR = "üí• –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω."

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
async def notify_admins(context: ContextTypes.DEFAULT_TYPE, message: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
    for admin_id in ADMINS:
        try:
            await context.bot.send_message(admin_id, message)
        except TelegramError as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id}: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏"""
    user = update.effective_user
    if not user.username:
        await update.message.reply_text(ErrorMessages.NO_USERNAME)
        return

    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /start –¥–ª—è @{user.username}")

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏
    now = datetime.datetime.utcnow().replace(tzinfo=pytz.utc)
    invite_expires = now + datetime.timedelta(minutes=30)
    subscription_ends = now + datetime.timedelta(hours=1)
    kick_at = now + datetime.timedelta(hours=1)  # –ü—Ä–∏–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ –∫–∏–∫–∞ –ø–æ—Å–ª–µ 1 —á–∞—Å–∞

    try:
        invite = await context.bot.create_chat_invite_link(
            chat_id=CHANNEL_ID,
            expire_date=int(invite_expires.timestamp()),  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ timestamp
            member_limit=1  # –õ–∏–º–∏—Ç 1 —É—á–∞—Å—Ç–Ω–∏–∫ –¥–ª—è —Å—Å—ã–ª–∫–∏
        )
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è @{user.username}: {e}")
        await update.message.reply_text(ErrorMessages.LINK_ERROR)
        return

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        async with await asyncpg.connect(DATABASE_URL) as conn:
            await conn.execute("""
                INSERT INTO tokens (token, username, invite_link, expires, subscription_ends, kick_at, used)
                VALUES ($1, $2, $3, $4, $5, $6, FALSE)
            """, uuid.uuid4().hex[:8], user.username.lower(), invite.invite_link, invite_expires, subscription_ends, kick_at)
            logger.info(f"–ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω –¥–ª—è @{user.username}")
    except asyncpg.PostgresError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è @{user.username}: {e}")
        await update.message.reply_text(ErrorMessages.DB_ERROR)
        await notify_admins(context, f"–û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è @{user.username}: {e}")
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫–∏
    await update.message.reply_text(
        f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: {invite.invite_link}\n"
        f"‚è≥ –î–µ–π—Å—Ç–≤—É–µ—Ç 30 –º–∏–Ω—É—Ç\n"
        f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {subscription_ends.astimezone(MOSCOW_TZ).strftime('%Y-%m-%d %H:%M:%S %Z')}"
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–∫–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
async def kick_expired_members(context: ContextTypes.DEFAULT_TYPE):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π"""
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∞–≤—Ç–æ–∫–∏–∫–∞...")

    try:
        async with await asyncpg.connect(DATABASE_URL) as conn:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –∏—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è –¥–ª—è –∫–∏–∫–∞
            expired_users = await conn.fetch("""
                SELECT username, kick_at
                FROM tokens
                WHERE kick_at <= NOW() AND used = TRUE
            """)
            for user in expired_users:
                try:
                    user_id = await get_user_id_by_username(context, user['username'])
                    if user_id:
                        # –ö–∏–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        await context.bot.ban_chat_member(
                            chat_id=CHANNEL_ID,
                            user_id=user_id,
                            until_date=int((datetime.datetime.utcnow() + datetime.timedelta(seconds=30)).timestamp())
                        )
                        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user['username']} –∫–∏–∫–Ω—É—Ç –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏.")
                except TelegramError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∫–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user['username']}: {e}")
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ–∫–∏–∫–∞: {e}", exc_info=True)
        await notify_admins(context, f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∫–∏–∫–∞: {e}")

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è user_id –ø–æ username
async def get_user_id_by_username(context: ContextTypes.DEFAULT_TYPE, username: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ user_id –ø–æ username"""
    try:
        user = await context.bot.get_chat_member(CHANNEL_ID, username)
        return user.user.id
    except TelegramError as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å user_id –¥–ª—è @{username}: {e}")
        return None

# –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
        try:
            conn = await asyncpg.connect(DATABASE_URL)
            await conn.close()
        except Exception as e:
            logger.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î: {e}")
            raise

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        async with await asyncpg.connect(DATABASE_URL) as conn:
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS tokens (
                    token TEXT PRIMARY KEY,
                    username TEXT NOT NULL,
                    invite_link TEXT NOT NULL,
                    expires TIMESTAMP NOT NULL,
                    subscription_ends TIMESTAMP NOT NULL,
                    kick_at TIMESTAMP,
                    used BOOLEAN DEFAULT FALSE
                )
            """)
            logger.info("–¢–∞–±–ª–∏—Ü–∞ tokens –≥–æ—Ç–æ–≤–∞!")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
        application = ApplicationBuilder().token(BOT_TOKEN).build()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–¥–∞—á
        application.job_queue.run_repeating(kick_expired_members, interval=300, first=10)

        # –ó–∞–ø—É—Å–∫
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await application.run_polling()

    except Exception as e:
        logger.critical(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
