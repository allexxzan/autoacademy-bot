import os
import uuid
import pytz
import logging
import datetime
import asyncpg
import aiohttp

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
from dotenv import load_dotenv

# Telegram API ‚Äî –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
from telegram import Update, ChatInviteLink, User
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    JobQueue, ChatMemberHandler, MessageHandler, filters
)
from telegram.constants import ChatMemberStatus
from telegram.error import BadRequest

# –ü–æ–¥–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()

# ====== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ======

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ Telegram
BOT_TOKEN = os.getenv("BOT_TOKEN")
# URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL (–¥–ª—è asyncpg)
DATABASE_URL = os.getenv("DATABASE_URL")
# –í–µ–±—Ö—É–∫ –¥–ª—è Google Sheets (–∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ)
GOOGLE_SHEETS_WEBHOOK = os.getenv("GOOGLE_SHEETS_WEBHOOK")

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ú–æ—Å–∫–≤—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

# ID –∫–∞–Ω–∞–ª–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ ‚Äî —Å—É–ø–µ—Ä-–≥—Ä—É–ø–ø–∞/–∫–∞–Ω–∞–ª)
CHANNEL_ID = -1002673430364

# –°–ª–æ–≤–∞—Ä—å —Å ID –∞–¥–º–∏–Ω–æ–≤ (–∫–ª—é—á ‚Äî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ)
ADMINS = {
    5744533263: "–ì–ª–∞–≤–Ω—ã–π –∫—É—Ä–∞—Ç–æ—Ä",
    324109605: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä (@allexx34)",
    8116299506: "–ê–Ω–Ω–∞ (@KuratorAutoAcademy) ‚Äî –ö—É—Ä–∞—Ç–æ—Ä –ê–≤—Ç–æ–ê–∫–∞–¥–µ–º–∏–∏",
    754549018: "–î–º–∏—Ç—Ä–∏–π –ë—É–ª–∞—Ç–æ–≤ (@dimabu5)"
}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî –≤–∫–ª—é—á–∞–µ–º DEBUG-—É—Ä–æ–≤–µ–Ω—å, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –≤—Å—ë
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(name)s - %(message)s'
)
logger = logging.getLogger(__name__)

# ====== –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ======

async def get_db_pool():
    """
    –°–æ–∑–¥–∞—ë—Ç –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å PostgreSQL.
    –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncpg.create_pool –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –ë–î.
    """
    try:
        logger.info("–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        pool = await asyncpg.create_pool(DATABASE_URL, max_size=10)
        logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.")
        return pool
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
        raise

async def notify_kurators(context: ContextTypes.DEFAULT_TYPE, message: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∫—É—Ä–∞—Ç–æ—Ä–∞–º (–∞–¥–º–∏–Ω–∞–º).
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ –≤—Ö–æ–¥–µ —á—É–∂–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    for admin_id in ADMINS:
        try:
            await context.bot.send_message(admin_id, message)
            logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä—É {ADMINS[admin_id]} (ID: {admin_id})")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}", exc_info=True)

async def send_to_google_sheets(user_id: int, username: str, first_name: str, start_date: str, end_date: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–¥–ø–∏—Å–∫–∏) –≤ Google Sheets —á–µ—Ä–µ–∑ webhook.
    –ò—Å–ø–æ–ª—å–∑—É–µ–º aiohttp –¥–ª—è POST-–∑–∞–ø—Ä–æ—Å–∞.
    """
    if not GOOGLE_SHEETS_WEBHOOK:
        logger.warning("üö® GOOGLE_SHEETS_WEBHOOK –Ω–µ –∑–∞–¥–∞–Ω, –¥–∞–Ω–Ω—ã–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è")
        return

    data = {
        "user_id": user_id,
        "username": username,
        "first_name": first_name,
        "subscription_start": start_date,
        "subscription_end": end_date
    }

    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(GOOGLE_SHEETS_WEBHOOK, json=data) as resp:
                if resp.status == 200:
                    logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Google Sheets")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets: HTTP {resp.status}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets: {e}", exc_info=True)

# ====== –°—Ç–∞—Ä—Ç ======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    username = user.username

    if not username:
        await update.message.reply_text(
            "‚ùóÔ∏è –£ —Ç–µ–±—è –Ω–µ —É–∫–∞–∑–∞–Ω username –≤ Telegram. –î–æ–±–∞–≤—å –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è."
        )
        return

    approved = context.application.bot_data.get("approved_usernames", set())
    if username.lower() not in approved:
        await update.message.reply_text(
            "‚õîÔ∏è –¢—ã –Ω–µ –≤ —Å–ø–∏—Å–∫–µ —É—á–µ–Ω–∏–∫–æ–≤ –ê–≤—Ç–æ–ê–∫–∞–¥–µ–º–∏–∏. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.\n"
            "–ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Å—å —Å–æ —Å–≤–æ–∏–º –∫—É—Ä–∞—Ç–æ—Ä–æ–º."
        )
        return

    now_utc = datetime.datetime.utcnow().replace(tzinfo=pytz.utc)

    async with context.application.bot_data["db"].acquire() as conn:
        token = await conn.fetchrow("""
            SELECT * FROM tokens
            WHERE LOWER(username) = $1
            ORDER BY created_at DESC
            LIMIT 1
        """, username.lower())

        if token:
            # üéØ –£–∂–µ –ø–æ–ª—É—á–∞–ª —Å—Å—ã–ª–∫—É —Ä–∞–Ω–µ–µ ‚Äî –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ –Ω–µ –¥–∞—ë–º
            await update.message.reply_text(
                "‚ö†Ô∏è –¢—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª —Å—Å—ã–ª–∫—É. –ü–æ–≤—Ç–æ—Ä–Ω–æ –µ—ë –º–æ–∂–µ—Ç –≤—ã–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫—É—Ä–∞—Ç–æ—Ä."
            )
            return

        # üéØ –í–ø–µ—Ä–≤—ã–µ ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É
        try:
            new_invite = await context.bot.create_chat_invite_link(
                chat_id=CHANNEL_ID,
                expire_date=now_utc + datetime.timedelta(minutes=30),
                member_limit=1
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è @{username}: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∫—É—Ä–∞—Ç–æ—Ä—É.")
            return

        new_expires = now_utc + datetime.timedelta(minutes=30)
        new_ends = now_utc + datetime.timedelta(hours=1)

        await conn.execute("""
            INSERT INTO tokens (token, username, user_id, invite_link, expires, subscription_ends, used, created_at)
            VALUES ($1, $2, NULL, $3, $4, $5, FALSE, $6)
        """, uuid.uuid4().hex[:8], username.lower(), new_invite.invite_link, new_expires, new_ends, now_utc)

        expires_msk = new_expires.astimezone(MOSCOW_TZ).strftime('%Y-%m-%d %H:%M:%S %Z')
        ends_msk = new_ends.astimezone(MOSCOW_TZ).strftime('%Y-%m-%d %H:%M:%S %Z')

        await update.message.reply_text(
            f"üîó –í–æ—Ç —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞:\n{new_invite.invite_link}\n\n"
            f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –¥–æ {expires_msk}\n"
            f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {ends_msk}\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –µ—ë –≤–æ–≤—Ä–µ–º—è. –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∫—É—Ä–∞—Ç–æ—Ä–∞."
        )

    # üéØ –£–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º
    invite_expires = token["expires"].replace(tzinfo=pytz.utc)
    subscription_ends = token["subscription_ends"].replace(tzinfo=pytz.utc)
    used = token["used"]
    stored_user_id = token["user_id"]

    if used and stored_user_id:  # —Å—Å—ã–ª–∫–∞ —É–∂–µ –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∏ user_id –µ—Å—Ç—å
        await update.message.reply_text(
            "‚ö†Ô∏è –¢—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —Å–≤–æ—é —Å—Å—ã–ª–∫—É. –ù–æ–≤—É—é –º–æ–∂–µ—Ç –≤—ã–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫—É—Ä–∞—Ç–æ—Ä."
        )
        return

    if invite_expires < now_utc and stored_user_id:  # –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –∏ user_id —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        await update.message.reply_text(
            "‚ö†Ô∏è –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–∏ –∏—Å—Ç—ë–∫. –ù–æ–≤—É—é –º–æ–∂–µ—Ç –≤—ã–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫—É—Ä–∞—Ç–æ—Ä."
        )
        return

    # üéØ –í—Å—ë –µ—â—ë –¥–µ–π—Å—Ç–≤—É–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º
    expires_msk = invite_expires.astimezone(MOSCOW_TZ).strftime('%Y-%m-%d %H:%M:%S %Z')
    ends_msk = subscription_ends.astimezone(MOSCOW_TZ).strftime('%Y-%m-%d %H:%M:%S %Z')

    await update.message.reply_text(
        f"‚ö†Ô∏è –¢—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª —Å—Å—ã–ª–∫—É, –∫–æ—Ç–æ—Ä–∞—è –µ—â—ë –¥–µ–π—Å—Ç–≤—É–µ—Ç.\n"
        f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –¥–æ {expires_msk}\n"
        f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {ends_msk}\n"
        "–ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äî –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∫—É—Ä–∞—Ç–æ—Ä—É."
    )

# ====== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —á–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ) ======

async def handle_chat_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤ —á–∞—Ç–µ (–≤—Å—Ç—É–ø–∞–µ—Ç, –≤—ã—Ö–æ–¥–∏—Ç –∏ —Ç.–¥.)
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∫—É—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö.
    """
    chat_member = update.my_chat_member
    user = chat_member.new_chat_member.user
    user_id = user.id
    username = user.username or f"ID_{user_id}"
    now = datetime.datetime.utcnow().replace(tzinfo=pytz.utc)

    if user.is_bot:
        logger.debug(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –±–æ—Ç–∞ @{username}")
        return

    async with context.application.bot_data["db"].acquire() as conn:
        row = await conn.fetchrow("SELECT * FROM tokens WHERE user_id = $1 LIMIT 1", user_id)

        if row:
            subscription_ends = row["subscription_ends"].replace(tzinfo=pytz.utc)
            used = row["used"]
            joined = row.get("joined", False)

            # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ ‚Äî —É–≤–µ–¥–æ–º–ª—è–µ–º –∫—É—Ä–∞—Ç–æ—Ä–æ–≤
            if subscription_ends < now:
                msg = (
                    f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {user_id}) –≤–æ—à—ë–ª –≤ –∫–∞–Ω–∞–ª, "
                    f"–Ω–æ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ {subscription_ends.astimezone(MOSCOW_TZ).strftime('%Y-%m-%d %H:%M:%S %Z')}.\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–¥–∞–ª–∏—Ç–µ."
                )
                await notify_kurators(context, msg)
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π –≤–æ—à—ë–ª –≤ –∫–∞–Ω–∞–ª.")
                return

            # –ï—Å–ª–∏ —é–∑–µ—Ä –≤–ø–µ—Ä–≤—ã–µ –≤–æ—à—ë–ª ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º
            if not joined:
                await conn.execute("""
                    UPDATE tokens SET used = TRUE, joined = TRUE, joined_at = $2 WHERE user_id = $1
                """, user_id, now)

                ends_msk = subscription_ends.astimezone(MOSCOW_TZ).strftime('%Y-%m-%d %H:%M:%S %Z')
                try:
                    await context.bot.send_message(
                        user_id,
                        f"üéâ –û—Ç–ª–∏—á–Ω–æ! –¢—ã —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –¢–ì –ê–≤—Ç–æ–ê–∫–∞–¥–µ–º–∏–∏.\n"
                        f"‚è≥ –ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è {ends_msk}.\n"
                        "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è!"
                    )
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ @{username}")
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ @{username}: {e}", exc_info=True)
        else:
            # –ï—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ –∏ –æ–Ω –Ω–µ –∞–¥–º–∏–Ω ‚Äî —É–≤–µ–¥–æ–º–ª—è–µ–º –∫—É—Ä–∞—Ç–æ—Ä–æ–≤ –æ —á—É–∂–∞–∫–µ
            if user_id not in ADMINS:
                msg = (
                    f"‚ö†Ô∏è –í –∫–∞–Ω–∞–ª –≤—Å—Ç—É–ø–∏–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user_id}).\n"
                    "–ï–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ."
                )
                await notify_kurators(context, msg)
                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —á—É–∂–∞–∫ @{username} –≤ –∫–∞–Ω–∞–ª–µ.")

# ====== –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–∏–∫ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ ======

async def kick_expired_members(context: ContextTypes.DEFAULT_TYPE):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç).
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –∏ –ø–æ–¥–ø–∏—Å–∫–æ–π.
    –£–¥–∞–ª—è–µ—Ç (–∫–∏–∫–∞–µ—Ç) —Ç–µ—Ö, —É –∫–æ–≥–æ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.
    """
    logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫")
    now_utc = datetime.datetime.utcnow().replace(tzinfo=pytz.utc)

    async with context.application.bot_data["db"].acquire() as conn:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
        rows = await conn.fetch("""
            SELECT * FROM tokens
            WHERE used = TRUE AND subscription_ends IS NOT NULL AND user_id != 0
        """)

        for row in rows:
            user_id = row["user_id"]
            username = row["username"]
            sub_ends = row["subscription_ends"].replace(tzinfo=pytz.utc)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∞–Ω–∞–ª–µ
            try:
                member = await context.bot.get_chat_member(CHANNEL_ID, user_id)
                is_in_chat = member.status in ['member', 'restricted']
            except BadRequest as e:
                is_in_chat = False if "user not found" in str(e).lower() else True

            time_left = (sub_ends - now_utc).total_seconds()

            # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ 10 –º–∏–Ω—É—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            if 0 < time_left <= 600 and is_in_chat:
                try:
                    await context.bot.send_message(
                        user_id,
                        "‚ö†Ô∏è –ó–∞–≤—Ç—Ä–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–≤–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–∏."
                    )
                    logger.info(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ @{username}")
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ @{username}: {e}", exc_info=True)

            # –ï—Å–ª–∏ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç—ë–∫ ‚Äî –∫–∏–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if time_left <= 0 and is_in_chat:
                try:
                    # –ë–∞–Ω–∏–º –Ω–∞ 30 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –∫–∏–∫–Ω—É—Ç—å
                    await context.bot.ban_chat_member(CHANNEL_ID, user_id, until_date=int(now_utc.timestamp()) + 30)
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω–∞ –≤ –±–∞–∑–µ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º FALSE, —á—Ç–æ–±—ã –ø–æ–º–µ—Ç–∏—Ç—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω
                    await conn.execute("UPDATE tokens SET used = FALSE WHERE user_id = $1", user_id)
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É–¥–∞–ª—ë–Ω –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
                    try:
                        await context.bot.send_message(
                            user_id,
                            "–ü—Ä–∏–≤–µ—Ç! –¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º, —á—Ç–æ –±—ã–ª —Å –Ω–∞–º–∏.\n–¢–≤–æ—è –ê–≤—Ç–æ–ê–∫–∞–¥–µ–º–∏—è :)"
                        )
                    except Exception as e:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–∏–∫–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º, –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–∏–∫–∞ @{username}: {e}", exc_info=True)

                except Exception as e:
                    # –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–∞–º–æ–≥–æ –∫–∏–∫–∞ ‚Äî –≤–∞–∂–Ω–∞—è, –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∫ –æ—à–∏–±–∫—É
                    logger.error(f"–û—à–∏–±–∫–∞ –∫–∏–∫–∞ @{username}: {e}", exc_info=True)

        # –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ "—á—É–∂–∏—Ö" (–Ω–µ–ª–µ–≥–∞–ª—å–Ω—ã—Ö) —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–ª–µ–≥–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ API Telegram
            admins = await context.bot.get_chat_administrators(CHANNEL_ID)
            admin_ids = {admin.user.id for admin in admins}  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ ID –∞–¥–º–∏–Ω–æ–≤
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤: {e}", exc_info=True)
            return

        # ID –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –∏–∑ –∫–∞–Ω–∞–ª–∞ ‚Äî –∏—Å–∫–ª—é—á–∞–µ–º –∏—Ö –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
        EXCEPTION_IDS = set(ADMINS.keys())
        EXCEPTIONS = admin_ids.union(EXCEPTION_IDS)

        # –ü–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã –≤—Å–µ—Ö —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π (used=TRUE –∏ –Ω–µ –∏—Å—Ç–µ–∫—à–µ–π)
        allowed_ids = {row["user_id"] for row in await conn.fetch("""
            SELECT user_id FROM tokens
            WHERE used = TRUE AND subscription_ends > $1 AND user_id IS NOT NULL
        """, now_utc)}

        # –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –±–∞–∑–µ (—á—å–∏ user_id –µ—Å—Ç—å)
        all_known = await conn.fetch("SELECT user_id FROM tokens WHERE user_id IS NOT NULL")
        known_ids = {row["user_id"] for row in all_known}

        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–º user_id
        for user_id in known_ids:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –∏–ª–∏ –∞–¥–º–∏–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if user_id in allowed_ids or user_id in EXCEPTIONS:
                continue

            try:
                member = await context.bot.get_chat_member(CHANNEL_ID, user_id)
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å—Ç–∞—Ç—É—Å–µ "member" –∏–ª–∏ "restricted", —Ç–æ –æ–Ω –≤ –∫–∞–Ω–∞–ª–µ
                if member.status in ['member', 'restricted']:
                    username = member.user.username or f"ID_{user_id}"
                    logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —á—É–∂–∞–∫ @{username} (ID: {user_id})")

                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫—É—Ä–∞—Ç–æ—Ä–æ–≤ –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ —á—É–∂–∞–∫–∞ –≤ –∫–∞–Ω–∞–ª–µ
                    msg = (
                        f"‚ö†Ô∏è –í –∫–∞–Ω–∞–ª –≤—Å—Ç—É–ø–∏–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user_id}).\n"
                        "–ï–≥–æ –Ω–µ—Ç –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∞—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–¥–∞–ª–∏—Ç–µ."
                    )
                    await notify_kurators(context, msg)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ ID {user_id}: {e}", exc_info=True)

# ====== –ö–æ–º–∞–Ω–¥–∞ /sendlink ‚Äî –≤—ã–¥–∞—á–∞ –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è ======

async def sendlink(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –∏ –≤—ã–¥–∞—á–∏ –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —É—á–µ–Ω–∏–∫—É.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ, –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Å—Ç–∞—Ä—ã–µ —Å—Å—ã–ª–∫–∏,
    —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é, –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ –±–∞–∑—É –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∞.
    """
    user = update.effective_user
    if user.id not in ADMINS:
        await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /sendlink –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ username –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /sendlink @username")
        return

    username = context.args[0].lstrip("@").lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ —É—á–µ–Ω–∏–∫–æ–≤
    if username not in context.application.bot_data.get("approved_usernames", set()):
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —É—á–µ–Ω–∏–∫–æ–≤.")
        return

    now = datetime.datetime.utcnow()
    async with context.application.bot_data["db"].acquire() as conn:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç.–µ. –æ–Ω —É–∂–µ –≤ –∫–∞–Ω–∞–ª–µ)
        existing = await conn.fetchrow("""
            SELECT user_id FROM tokens
            WHERE username = $1 AND used = TRUE AND user_id IS NOT NULL
        """, username)

        if existing:
            try:
                member = await context.bot.get_chat_member(CHANNEL_ID, existing["user_id"])
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∫–∞–Ω–∞–ª–µ ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –∞–¥–º–∏–Ω–∞
                if member.status in ["member", "restricted"]:
                    await update.message.reply_text(
                        "‚ö†Ô∏è –°—Å—ã–ª–∫–∞ —Ä–∞–Ω–µ–µ —É–∂–µ –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ª–µ–≤–∞–∫ –ø–æ–∫–∏–Ω—É–ª –∫–∞–Ω–∞–ª."
                    )
                    logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≤—ã–¥–∞—á–∏, –Ω–æ –∫—Ç–æ-—Ç–æ —É–∂–µ –≤ –∫–∞–Ω–∞–ª–µ –ø–æ–¥ @{username}")
                    return
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ {existing['user_id']}: {e}", exc_info=True)

        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –±—ã–ª–∏)
        old_links = await conn.fetch("SELECT invite_link FROM tokens WHERE username = $1", username)
        for link_rec in old_links:
            link = link_rec["invite_link"]
            if link:
                try:
                    await context.bot.revoke_chat_invite_link(CHANNEL_ID, link)
                    logger.info(f"–°—Ç–∞—Ä–∞—è —Å—Å—ã–ª–∫–∞ @{username} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—É—é —Å—Å—ã–ª–∫—É @{username}: {e}", exc_info=True)

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á—Ç–æ–±—ã –ø–æ—Ç–æ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é)
        await conn.execute("DELETE FROM tokens WHERE username = $1", username)

        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –∏ –ø–æ–¥–ø–∏—Å–∫—É
        token = uuid.uuid4().hex[:8]
        invite_expires = now + datetime.timedelta(minutes=30)
        subscription_ends = now + datetime.timedelta(hours=1)

        try:
            invite: ChatInviteLink = await context.bot.create_chat_invite_link(
                chat_id=CHANNEL_ID,
                expire_date=invite_expires,
                member_limit=1
            )
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è @{username}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è @{username}: {e}", exc_info=True)
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É tokens
        await conn.execute("""
            INSERT INTO tokens (token, username, user_id, invite_link, expires, subscription_ends, used)
            VALUES ($1, $2, NULL, $3, $4, $5, FALSE)
        """, token, username, invite.invite_link, invite_expires, subscription_ends)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        ends_msk = subscription_ends.replace(tzinfo=pytz.utc).astimezone(MOSCOW_TZ)
        expires_msk = invite_expires.replace(tzinfo=pytz.utc).astimezone(MOSCOW_TZ)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await update.message.reply_text(
            f"‚ôªÔ∏è –°—Å—ã–ª–∫–∞ –¥–ª—è @{username} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ —Å–±—Ä–æ—à–µ–Ω—ã –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ.\n"
            f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏: {expires_msk.strftime('%Y-%m-%d %H:%M:%S %Z')}\n"
            f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {ends_msk.strftime('%Y-%m-%d %H:%M:%S %Z')}\n"
            f"–ü–æ–ø—Ä–æ—Å–∏ —É—á–µ–Ω–∏–∫–∞ –≤–≤–µ—Å—Ç–∏ /start –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É."
        )
        logger.info(f"–í—ã–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ @{username} –¥–æ {subscription_ends}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à approved_usernames –≤ –ø–∞–º—è—Ç–∏ –±–æ—Ç–∞
        context.application.bot_data["approved_usernames"].add(username)

# ====== –ö–æ–º–∞–Ω–¥–∞ /addstudent ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –≤ —Å–ø–∏—Å–æ–∫ ======

async def add_student(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ (username).
    –î–æ–±–∞–≤–ª—è–µ—Ç –≤ –±–∞–∑—É –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à approved_usernames.
    """
    if update.effective_user.id not in ADMINS:
        await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /addstudent –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞")
        return

    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /addstudent @username")
        return

    username = context.args[0].lstrip("@").lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ
    if username in context.application.bot_data.get("approved_usernames", set()):
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ —É—á–µ–Ω–∏–∫–æ–≤.")
        return

    async with context.application.bot_data["db"].acquire() as conn:
        # –í—Å—Ç–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É students
        await conn.execute("INSERT INTO students (username) VALUES ($1)", username)
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —É—á–µ–Ω–∏–∫ @{username}")

    # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
    context.application.bot_data["approved_usernames"].add(username)

    await update.message.reply_text(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤.\n–û–Ω —Å–º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ /start."
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –¥–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {update.effective_user.id}")

# ====== –ö–æ–º–∞–Ω–¥–∞ /stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ ======

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–æ–∫–µ–Ω–∞–º: –≤—Å–µ–≥–æ, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö, –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –∏—Å—Ç–µ–∫—à–∏—Ö.
    –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º.
    """
    if update.effective_user.id not in ADMINS:
        await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /stats –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞")
        return

    async with context.application.bot_data["db"].acquire() as conn:
        total = await conn.fetchval("SELECT COUNT(*) FROM tokens")
        used = await conn.fetchval("SELECT COUNT(*) FROM tokens WHERE used = TRUE")
        unused = await conn.fetchval("SELECT COUNT(*) FROM tokens WHERE used = FALSE")
        active = await conn.fetchval("SELECT COUNT(*) FROM tokens WHERE used = TRUE AND subscription_ends > now()")
        expired = await conn.fetchval("SELECT COUNT(*) FROM tokens WHERE used = TRUE AND subscription_ends <= now()")

    await update.message.reply_text(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ: {total}\n"
        f"‚Ä¢ ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö: {used}\n"
        f"‚Ä¢ üï∏ –ù–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö: {unused}\n"
        f"‚Ä¢ üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active}\n"
        f"‚Ä¢ üî¥ –ò—Å—Ç–µ–∫—à–∏—Ö: {expired}"
    )
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id}")

# ====== –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ‚Äî –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤—Ä—É—á–Ω—É—é –±–µ–∑ run_polling ======
async def main():
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    db_pool = await get_db_pool()
    application.bot_data["db"] = db_pool

    async with db_pool.acquire() as conn:
        rows = await conn.fetch("SELECT username FROM students")
        approved = {row["username"].lower() for row in rows}
        application.bot_data["approved_usernames"] = approved
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —É—á–µ–Ω–∏–∫–æ–≤: {len(approved)}")

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("sendlink", sendlink))
    application.add_handler(CommandHandler("addstudent", add_student))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(ChatMemberHandler(handle_chat_member, ChatMemberHandler.MY_CHAT_MEMBER))

    job_queue = application.job_queue
    job_queue.run_repeating(kick_expired_members, interval=300, first=10)

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

    # ===== üß† –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ =====
    await application.initialize()
    await application.start()
    await application.updater.start_polling()  # –Ω–µ run_polling()

if __name__ == "__main__":
    import asyncio

    loop = asyncio.get_event_loop()
    loop.create_task(main())
    loop.run_forever()
