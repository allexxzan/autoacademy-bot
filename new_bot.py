import traceback  # –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–µ–∫—Ç—Ä–µ–π—Å–∞ –æ—à–∏–±–æ–∫
import logging
import datetime
import asyncio
import os

def to_msk(dt_utc: datetime.datetime) -> datetime.datetime:
    msk_tz = datetime.timezone(datetime.timedelta(hours=3))
    if dt_utc.tzinfo is None:
        dt_utc = dt_utc.replace(tzinfo=datetime.timezone.utc)
    return dt_utc.astimezone(msk_tz)

from dotenv import load_dotenv
from telegram import ChatInviteLink, Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters,
    ChatMemberHandler
)
from telegram.error import TelegramError

from db import Database  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –±–∞–∑—ã

load_dotenv()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "").split(','))) if os.getenv("ADMIN_IDS") else []
CURATOR_ID = int(os.getenv("CURATOR_ID", "0"))
SUBSCRIPTION_MINUTES = int(os.getenv("SUBSCRIPTION_MINUTES", "10"))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    username = user.username.lower() if user.username else None
    user_id = user.id

    logger.info(f"/start –æ—Ç @{username} ({user_id})")

    if not username:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ –∑–∞–¥–∞–Ω username. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫—É—Ä–∞—Ç–æ—Ä—É.")
        return

    student = await db.get_student(username)
    logger.info(f"–ü–æ–∏—Å–∫ @{username} –≤ –ë–î: {'–ù–∞–π–¥–µ–Ω' if student else '–ù–ï –Ω–∞–π–¥–µ–Ω'}")

    if not student:
        await context.bot.send_message(CURATOR_ID, f"üö® –õ–µ–≤–∞–∫: @{username} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
        await update.message.reply_text("‚õî –ö–∞–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —É—á–µ–Ω–∏–∫–∞–º –ê–≤—Ç–æ–ê–∫–∞–¥–µ–º–∏–∏.")
        return

    now = datetime.datetime.utcnow().replace(tzinfo=datetime.timezone.utc)
    valid_until = now + datetime.timedelta(minutes=SUBSCRIPTION_MINUTES)

    logger.info(f"–¢–µ–∫—É—â–∏–π UTC: {now.isoformat()}")

    if student["valid_until"] and student["valid_until"] <= now:
        await update.message.reply_text("‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ ‚Äî —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∫—É—Ä–∞—Ç–æ—Ä–∞.")
        return

    if student["invite_sent_at"]:
        await update.message.reply_text("üì¨ –°—Å—ã–ª–∫–∞ —É–∂–µ –±—ã–ª–∞ –≤—ã–¥–∞–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫—É—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–æ–≤–æ–π.")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ —Å 5-–º–∏–Ω—É—Ç–Ω—ã–º —Å—Ä–æ–∫–æ–º –∂–∏–∑–Ω–∏
    expire = now + datetime.timedelta(minutes=5)
    try:
        invite_link_obj = await context.bot.create_chat_invite_link(
            chat_id=CHANNEL_ID,
            name=f"–°—Å—ã–ª–∫–∞ –¥–ª—è @{username}",
            member_limit=1,
            expire_date=expire,
            creates_join_request=False
        )
        invite_link = invite_link_obj.invite_link
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è @{username}: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    logger.info(f"–í—ã–¥–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è @{username}: {invite_link}")

    await db.record_invite_sent(username, invite_link, now)

    await update.message.reply_text(
        f"üîó –í–æ—Ç –≤–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª:\n{invite_link}\n\n"
        f"‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–∞–Ω–∞–ª—É."
    )

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ ---
async def generate_invite_link(bot, username: str) -> str | None:
    try:
        now = datetime.datetime.utcnow()
        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è @{username}...")

        expire = now + datetime.timedelta(minutes=10)
        invite_link: ChatInviteLink = await bot.create_chat_invite_link(
            chat_id=CHANNEL_ID,
            name=f"–°—Å—ã–ª–∫–∞ –¥–ª—è @{username}",
            member_limit=1,
            expire_date=expire,
            creates_join_request=False
        )

        logger.info(f"–°—Å—ã–ª–∫–∞ –¥–ª—è @{username} —Å–æ–∑–¥–∞–Ω–∞: {invite_link.invite_link}")
        logger.info(f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ: {invite_link.expire_date}")
        logger.info(f"invite.full: {invite_link.to_dict()}")

        return invite_link.invite_link

    except TelegramError as e:
        logger.error(f"[TG ERROR] –û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è @{username}: {e}")
        logger.error(traceback.format_exc())
    except Exception as e:
        logger.error(f"[PYTHON ERROR] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è @{username}: {e}")
        logger.error(traceback.format_exc())

    return None

# --- –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ ---
async def kick_expired_subscriptions(context: ContextTypes.DEFAULT_TYPE):
    logger.info("üßπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–∏–∫ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö...")

    now = datetime.datetime.utcnow().replace(tzinfo=datetime.timezone.utc)
    logger.info(f"üîç –¢–µ–∫—É—â–µ–µ UTC –≤—Ä–µ–º—è: {now.isoformat()}")

    expired_students = await db.get_expired_students(now)

    logger.info(f"üëÄ –ù–∞–π–¥–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –∏—Å—Ç—ë–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π: {len(expired_students)}")
    logger.info(f"üßæ –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–∞ –∫–∏–∫: {[s['username'] for s in expired_students]}")

    for student in expired_students:
        username = student["username"]
        user_id = student["user_id"]

        if not user_id:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω @{username} ‚Äî –Ω–µ—Ç user_id")
            continue

        try:
            await context.bot.ban_chat_member(CHANNEL_ID, user_id, until_date=now + datetime.timedelta(seconds=60))
            await context.bot.unban_chat_member(CHANNEL_ID, user_id)

            await db.mark_kicked(username, now)
            logger.info(f"‚úÖ –ö–∏–∫–Ω—É—Ç @{username}")

            try:
                await context.bot.send_message(user_id, "‚è≥ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É –∑–∞–∫—Ä—ã—Ç.")
            except Exception:
                logger.warning(f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ @{username} –ø–æ—Å–ª–µ –∫–∏–∫–∞")

        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ @{username}: {e}")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞ ---
async def check_new_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_member = update.chat_member
    new_user = chat_member.new_chat_member.user
    username = new_user.username.lower() if new_user.username else None

    # üëâ –§–∏–∫—Å –æ—Ç –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π
    if chat_member.new_chat_member.status != "member":
        logger.info(f"üëª @{username or new_user.id} –Ω–µ –≤—Å—Ç—É–ø–∏–ª ‚Äî —Å—Ç–∞—Ç—É—Å: {chat_member.new_chat_member.status}")
        return

    logger.debug(
        f"[chat_member] @{username or new_user.id} status change: {chat_member.old_chat_member.status} ‚Üí {chat_member.new_chat_member.status}"
    )

    if not username:
        await context.bot.send_message(
            CURATOR_ID,
            f"üö® –í –∫–∞–Ω–∞–ª –∑–∞—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ username: {new_user.id} ({new_user.first_name} {new_user.last_name or ''})"
        )
        return

    student = await db.get_student(username)
    if not student:
        await context.bot.send_message(
            CURATOR_ID,
            f"üö® –õ–µ–≤–∞–∫ @{username} –∑–∞—à–µ–ª –≤ –∫–∞–Ω–∞–ª! user_id={new_user.id}"
        )
        # –ú–æ–∂–µ—à—å —Å—Ä–∞–∑—É –∫–∏–∫–∞—Ç—å, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å:
        # await context.bot.ban_chat_member(update.chat_member.chat.id, new_user.id)
        # await context.bot.unban_chat_member(update.chat_member.chat.id, new_user.id)
        return

    now = datetime.datetime.utcnow().replace(tzinfo=datetime.timezone.utc)
    valid_until = now + datetime.timedelta(minutes=SUBSCRIPTION_MINUTES)

    await db.activate_subscription(username, now, valid_until)
    await db.set_kick_time(username, valid_until)
    await db.save_user_id(username, new_user.id)

    await context.bot.send_message(
        new_user.id,
        f"‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–∞–Ω–∞–ª—É. –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {SUBSCRIPTION_MINUTES} –º–∏–Ω—É—Ç."
    )

    logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è @{username} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ –∫–∞–Ω–∞–ª –¥–æ {to_msk(valid_until).isoformat()}")

# --- –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã ---
async def add_student(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")

    if len(context.args) < 2:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addstudent @username –§–ò–û")

    username = context.args[0].lstrip("@").lower()
    full_name = " ".join(context.args[1:])
    await db.add_student(username, full_name)
    await update.message.reply_text(f"‚úÖ @{username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É.")


async def deletestudent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")

    if not context.args:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /deletestudent @username")

    username = context.args[0].lstrip("@").lower()
    await db.delete_student(username)
    await update.message.reply_text(f"üóëÔ∏è @{username} —É–¥–∞–ª—ë–Ω.")

async def reset_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")

    if not context.args:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /resetlink @username")

    username = context.args[0].lstrip("@").lower()
    await db.reset_link(username)
    await update.message.reply_text(f"‚ôªÔ∏è –°—Å—ã–ª–∫–∞ –¥–ª—è @{username} —Å–±—Ä–æ—à–µ–Ω–∞.")

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return

    total, active, expired = await db.get_stats()
    await update.message.reply_text(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"üë• –í—Å–µ–≥–æ: {total}\n"
        f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active}\n"
        f"‚åõ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö: {expired}"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return

    await update.message.reply_text(
        "üõ† –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
        "/addstudent @username –§–ò–û ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞\n"
        "/resetlink @username ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å —Å—Å—ã–ª–∫—É\n"
        "/deletestudent @username ‚Äî —É–¥–∞–ª–∏—Ç—å\n"
        "/kickexpired ‚Äî –∫–∏–∫–Ω—É—Ç—å –∏—Å—Ç–µ–∫—à–∏—Ö\n"
        "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/help ‚Äî –ø–æ–º–æ—â—å"
    )

async def kickexpired(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")

    await kick_expired_subscriptions(context)
    await update.message.reply_text("‚úÖ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.")

# --- –ú–æ–ª—á–∞–Ω–∫–∞ –¥–ª—è –ª–µ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def silent_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pass

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    await db.connect()

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("addstudent", add_student))
    app.add_handler(CommandHandler("deletestudent", deletestudent))
    app.add_handler(CommandHandler("resetlink", reset_link))
    app.add_handler(CommandHandler("kickexpired", kickexpired))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, silent_handler))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞
    app.add_handler(ChatMemberHandler(check_new_member, ChatMemberHandler.CHAT_MEMBER))

    app.job_queue.run_repeating(kick_expired_subscriptions, interval=300, first=10)  # 300 —Å–µ–∫—É–Ω–¥ = 5 –º–∏–Ω—É—Ç

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await app.run_polling()

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()

    import asyncio
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
